package com.energy.ui;

import com.energy.sources.*;
import com.energy.logging.SystemLogger;

import javax.swing.*;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.awt.*;

public class SmartObjectUI {
    private List<SmartObject> smartObjects;
    private EnergySourceUI energySourceUI; // Reference to EnergySourceUI instance

    // Constructor
    public SmartObjectUI(EnergySourceUI energySourceUI) {
        this.smartObjects = new ArrayList<>();
        this.energySourceUI = energySourceUI; // Pass EnergySourceUI instance

        // Load smart objects from file during initialization
        try {
            loadSmartObjects();
        } catch (Exception e) {
            SystemLogger.logError("Failed to load smart objects: " + e.getMessage());
        }
    }

    // Load SmartObjects from file
    @SuppressWarnings("unchecked")
    private void loadSmartObjects() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("smart_objects.dat"))) {
            smartObjects = (List<SmartObject>) ois.readObject(); // Suppress unchecked warning
        } catch (FileNotFoundException e) {
            SystemLogger.logEvent("No saved devices found. Starting with an empty list.");
        } catch (IOException | ClassNotFoundException e) {
            SystemLogger.logError("Failed to load Smart Objects: " + e.getMessage());
        }
    }

    // Save SmartObjects to file
    private void saveSmartObjects() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("smart_objects.dat"))) {
            oos.writeObject(smartObjects);
            SystemLogger.logEvent("Smart Objects saved successfully.");
        } catch (IOException e) {
            SystemLogger.logError("Failed to save Smart Objects: " + e.getMessage());
        }
    }

    // Retrieve batteries from EnergySourceUI
    public List<Battery> getBatteries() {
        try {
            return energySourceUI.getBatteries(); // Delegate the call to EnergySourceUI
        } catch (Exception e) {
            SystemLogger.logError("Error retrieving batteries: " + e.getMessage());
            return new ArrayList<>();
        }
    }

    // GUI-based method for managing smart objects
    public void showGUI() {
        JFrame frame = new JFrame("Smart Object Management");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setSize(600, 400);
        frame.setLayout(new GridLayout(3, 2, 10, 10));

        // Add GUI buttons
        frame.add(createButton("Add Smart Light", e -> addSmartLight(frame)));
        frame.add(createButton("Add Smart Thermostat", e -> addSmartThermostat(frame)));
        frame.add(createButton("List All Devices", e -> listAllDevices(frame)));
        frame.add(createButton("Activate Devices", e -> activateDevices(frame)));
        frame.add(createButton("Deactivate Devices", e -> deactivateDevices(frame)));
        frame.add(createButton("Simulate Energy Consumption", e -> simulateEnergyConsumptionGUI(frame)));
        frame.add(createButton("Remove Smart Light", e -> removeSmartLight(frame)));
        frame.add(createButton("Remove Smart Thermostat", e -> removeSmartThermostat(frame)));
        frame.add(createButton("Remove All Smart Objects", e -> removeAllSmartObjects(frame)));

        frame.setVisible(true);
    }

    // Utility method to create a JButton
    private JButton createButton(String text, AbstractAction action) {
        JButton button = new JButton(text);
        button.addActionListener(action);
        return button;
    }

    // Add multiple SmartObjects at once
    public void addSmartObjects(List<SmartObject> objects) {
        if (objects != null && !objects.isEmpty()) {
            smartObjects.addAll(objects);
            SystemLogger.logEvent(objects.size() + " Smart Objects added.");
        } else {
            SystemLogger.logEvent("No Smart Objects were added (list is null or empty).");
        }
    }

    private void addSmartObject(SmartObject smartObject) {
        if (smartObject == null) {
            SystemLogger.logError("Attempted to add a null SmartObject.");
            return;
        }
        smartObjects.add(smartObject);
        saveSmartObjects();
        SystemLogger.logEvent("SmartObject added: " + smartObject.getName());
    }

    // Add a Smart Light
    private void addSmartLight(JFrame frame) {
        try {
            String name = JOptionPane.showInputDialog(frame, "Enter Smart Light name:");
            String energyDemandStr = JOptionPane.showInputDialog(frame, "Enter energy demand (kWh):");
            double energyDemand = Double.parseDouble(energyDemandStr);

            // Retrieve grid connection from EnergySourceUI
            GridConnection gridConnection = energySourceUI.getGridConnection();

            // Create and add SmartLight
            SmartLight light = new SmartLight(name, energyDemand, energySourceUI.getBatteries(), gridConnection);
            addSmartObject(light);

            JOptionPane.showMessageDialog(frame, "Smart Light added successfully!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(frame, "Failed to add Smart Light: " + e.getMessage());
        }
    }

    // Add a Smart Thermostat
    private void addSmartThermostat(JFrame frame) {
        try {
            String name = JOptionPane.showInputDialog(frame, "Enter Smart Thermostat name:");
            String energyDemandStr = JOptionPane.showInputDialog(frame, "Enter energy demand (kWh):");
            double energyDemand = Double.parseDouble(energyDemandStr);

            // Retrieve grid connection from EnergySourceUI
            GridConnection gridConnection = energySourceUI.getGridConnection();

            // Create and add SmartThermostat
            SmartThermostat thermostat = new SmartThermostat(name, energyDemand, energySourceUI.getBatteries(), gridConnection);
            addSmartObject(thermostat);

            JOptionPane.showMessageDialog(frame, "Smart Thermostat added successfully!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(frame, "Failed to add Smart Thermostat: " + e.getMessage());
        }
    }

    // List all SmartObjects
    private void listAllDevices(JFrame frame) {
        if (smartObjects.isEmpty()) {
            JOptionPane.showMessageDialog(frame, "No devices available.");
        } else {
            StringBuilder deviceList = new StringBuilder();
            for (SmartObject obj : smartObjects) {
                deviceList.append("Name: ").append(obj.getName())
                        .append(", Active: ").append(obj.isActive())
                        .append(", Energy Demand: ").append(obj.getEnergyDemand()).append(" kWh")
                        .append("\n");
            }
            JOptionPane.showMessageDialog(frame, deviceList.toString());
        }
    }

    // Activate devices
    private void activateDevices(JFrame frame) {
        for (SmartObject obj : smartObjects) {
            obj.activate();
        }
        JOptionPane.showMessageDialog(frame, "All devices activated.");
    }

    // Deactivate devices
    private void deactivateDevices(JFrame frame) {
        for (SmartObject obj : smartObjects) {
            obj.deactivate();
        }
        JOptionPane.showMessageDialog(frame, "All devices deactivated.");
    }

    // Simulate energy consumption
    private void simulateEnergyConsumptionGUI(JFrame frame) {
        try {
            String hoursStr = JOptionPane.showInputDialog(frame, "Enter hours of simulation:");
            double hours = Double.parseDouble(hoursStr);

            StringBuilder results = new StringBuilder("Simulation Results:\n");
            for (SmartObject obj : smartObjects) {
                double consumed = obj.consumeEnergy(hours, energySourceUI.getBatteries());
                results.append(obj.getName()).append(": Consumed ").append(consumed).append(" kWh\n");
            }

            saveSmartObjects();
            JOptionPane.showMessageDialog(frame, results.toString(), "Simulation Results", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(frame, "Simulation failed: " + e.getMessage());
        }
    }

    // Remove all SmartObjects
    private void removeAllSmartObjects(JFrame frame) {
        smartObjects.clear();
        saveSmartObjects();
        JOptionPane.showMessageDialog(frame, "All devices removed.");
    }

    // Remove a Smart Light
    private void removeSmartLight(JFrame frame) {
        String name = JOptionPane.showInputDialog(frame, "Enter the name of the Smart Light to remove:");
        smartObjects.removeIf(obj -> obj instanceof SmartLight && obj.getName().equalsIgnoreCase(name));
        saveSmartObjects();
        JOptionPane.showMessageDialog(frame, "Smart Light removed.");
    }

    // Remove a Smart Thermostat
    private void removeSmartThermostat(JFrame frame) {
        String name = JOptionPane.showInputDialog(frame, "Enter the name of the Smart Thermostat to remove:");
        smartObjects.removeIf(obj -> obj instanceof SmartThermostat && obj.getName().equalsIgnoreCase(name));
        saveSmartObjects();
        JOptionPane.showMessageDialog(frame, "Smart Thermostat removed.");
    }
}
